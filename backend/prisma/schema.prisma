// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(uuid())
  email     String      @unique
  password  String
  name      String?
  about     String?
  posts     Post[]
  likedPost LikedPost[]
  SavedPost SavedPost[]
  Comment   Comment[]
}

model Post {
  id        String      @id @default(uuid())
  title     String
  date      String?
  content   String
  published Boolean     @default(false)
  author    User        @relation(fields: [authorId], references: [id])
  authorId  String
  likedBy   LikedPost[]
  SavedPost SavedPost[]
  Comment   Comment[]
}

model LikedPost {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId]) // Ensure a user can like a post only once
}

model SavedPost {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId]) // Ensure a user can save a post only once
}

model Comment {
  id        String   @id @default(uuid())
  content   String // This is the actual comment text
  commenter String
  createdAt DateTime @default(now()) // Timestamp for when the comment was created
  updatedAt DateTime @updatedAt // Automatically updates when the comment is modified
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
